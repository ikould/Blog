<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd   
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder
		location="classpath:config/datasource/jdbc.properties" />
	<context:property-placeholder location="classpath:config/log4j/log4j.properties" />

	<!-- 扫描Entity类 -->
	<context:component-scan base-package="com.ikould.blog.*">
	</context:component-scan>

	<!--创建jdbc数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc_Driver}" />
		<property name="url" value="${jdbc_ConnectionURL}" />
		<property name="username" value="${jdbc_Username}" />
		<property name="password" value="${jdbc_Password}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:config/datasource/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 创建事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 利用JDBC事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 设定事务过滤方法 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="*" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 设定过滤的server -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.ikould.blog.service..*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ikould.blog" />
	</bean>

	<!-- 通过DefaultAnnotationHandlerMapping将拦截器注入 -->
	<!-- <bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				这边可以实现多个拦截器
				<ref bean="DefaultInterceptor" />
			</list>
		</property>
	</bean>
	自定义的default的拦截器
	<bean id="DefaultInterceptor" class="com.ikould.page.intercepter.DefaultInterceptor">
	</bean> -->
</beans>
